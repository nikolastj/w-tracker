{
  "version": 3,
  "sources": ["src/app/auth/services/auth-state.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AuthState, User } from '../models/auth.models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthStateService {\n  private authState = new BehaviorSubject<AuthState>({\n    user: null,\n    token: null,\n    isAuthenticated: false,\n  });\n\n  public authState$ = this.authState.asObservable();\n\n  constructor() {\n    this.loadAuthFromStorage();\n  }\n\n  getCurrentAuthState(): AuthState {\n    return this.authState.value;\n  }\n\n  isAuthenticated(): boolean {\n    return this.authState.value.isAuthenticated;\n  }\n\n  getCurrentUser(): User | null {\n    return this.authState.value.user;\n  }\n\n  getToken(): string | null {\n    return this.authState.value.token;\n  }\n\n  setAuthState(authData: any): void {\n    const newState: AuthState = {\n      user: {\n        id: authData.id,\n        username: authData.username,\n        email: authData.email,\n        firstName: authData.firstName || '',\n        lastName: authData.lastName || '',\n        bio: authData.bio || '',\n      },\n      token: authData.token,\n      isAuthenticated: true,\n    };\n\n    this.authState.next(newState);\n    this.saveAuthToStorage(newState);\n  }\n\n  clearAuthState(): void {\n    const emptyState: AuthState = {\n      user: null,\n      token: null,\n      isAuthenticated: false,\n    };\n\n    this.authState.next(emptyState);\n    this.removeAuthFromStorage();\n  }\n\n  private saveAuthToStorage(authState: AuthState): void {\n    if (authState.token) {\n      localStorage.setItem('auth_token', authState.token);\n    }\n    if (authState.user) {\n      localStorage.setItem('auth_user', JSON.stringify(authState.user));\n    }\n  }\n\n  private loadAuthFromStorage(): void {\n    const token = localStorage.getItem('auth_token');\n    const userJson = localStorage.getItem('auth_user');\n\n    if (token && userJson) {\n      try {\n        const user = JSON.parse(userJson);\n        this.authState.next({\n          user,\n          token,\n          isAuthenticated: true,\n        });\n      } catch (error) {\n        console.error('Failed to parse stored user data:', error);\n        this.clearAuthState();\n      }\n    }\n  }\n\n  private removeAuthFromStorage(): void {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  }\n}\n"],
  "mappings": ";;;;;;;;AAOM,IAAO,mBAAP,MAAO,kBAAgB;EACnB,YAAY,IAAI,gBAA2B;IACjD,MAAM;IACN,OAAO;IACP,iBAAiB;GAClB;EAEM,aAAa,KAAK,UAAU,aAAY;EAE/C,cAAA;AACE,SAAK,oBAAmB;EAC1B;EAEA,sBAAmB;AACjB,WAAO,KAAK,UAAU;EACxB;EAEA,kBAAe;AACb,WAAO,KAAK,UAAU,MAAM;EAC9B;EAEA,iBAAc;AACZ,WAAO,KAAK,UAAU,MAAM;EAC9B;EAEA,WAAQ;AACN,WAAO,KAAK,UAAU,MAAM;EAC9B;EAEA,aAAa,UAAa;AACxB,UAAM,WAAsB;MAC1B,MAAM;QACJ,IAAI,SAAS;QACb,UAAU,SAAS;QACnB,OAAO,SAAS;QAChB,WAAW,SAAS,aAAa;QACjC,UAAU,SAAS,YAAY;QAC/B,KAAK,SAAS,OAAO;;MAEvB,OAAO,SAAS;MAChB,iBAAiB;;AAGnB,SAAK,UAAU,KAAK,QAAQ;AAC5B,SAAK,kBAAkB,QAAQ;EACjC;EAEA,iBAAc;AACZ,UAAM,aAAwB;MAC5B,MAAM;MACN,OAAO;MACP,iBAAiB;;AAGnB,SAAK,UAAU,KAAK,UAAU;AAC9B,SAAK,sBAAqB;EAC5B;EAEQ,kBAAkB,WAAoB;AAC5C,QAAI,UAAU,OAAO;AACnB,mBAAa,QAAQ,cAAc,UAAU,KAAK;IACpD;AACA,QAAI,UAAU,MAAM;AAClB,mBAAa,QAAQ,aAAa,KAAK,UAAU,UAAU,IAAI,CAAC;IAClE;EACF;EAEQ,sBAAmB;AACzB,UAAM,QAAQ,aAAa,QAAQ,YAAY;AAC/C,UAAM,WAAW,aAAa,QAAQ,WAAW;AAEjD,QAAI,SAAS,UAAU;AACrB,UAAI;AACF,cAAM,OAAO,KAAK,MAAM,QAAQ;AAChC,aAAK,UAAU,KAAK;UAClB;UACA;UACA,iBAAiB;SAClB;MACH,SAAS,OAAO;AACd,gBAAQ,MAAM,qCAAqC,KAAK;AACxD,aAAK,eAAc;MACrB;IACF;EACF;EAEQ,wBAAqB;AAC3B,iBAAa,WAAW,YAAY;AACpC,iBAAa,WAAW,WAAW;EACrC;;qCAzFW,mBAAgB;EAAA;4EAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YAFf,OAAM,CAAA;;;sEAEP,kBAAgB,CAAA;UAH5B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
