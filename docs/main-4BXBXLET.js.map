{
  "version": 3,
  "sources": ["src/app/auth/guards/auth.guard.ts", "src/app/app.routes.ts", "src/app/app.config.ts", "src/app/app.ts", "src/app/app.html", "src/main.ts"],
  "sourcesContent": ["import { Injectable, inject } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable, map } from 'rxjs';\nimport { AuthStateService } from '../services/auth-state.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  private authStateService = inject(AuthStateService);\n  private router = inject(Router);\n\n  canActivate(): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authStateService.authState$.pipe(\n      map((authState) => {\n        if (authState.isAuthenticated) {\n          return true;\n        } else {\n          return this.router.createUrlTree(['/auth/login']);\n        }\n      }),\n    );\n  }\n}\n", "import { Routes } from '@angular/router';\nimport { AuthGuard } from './auth/guards/auth.guard';\nimport { CanDeactivateGuard } from './core';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/dashboard',\n    pathMatch: 'full',\n  },\n\n  {\n    path: 'auth',\n    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),\n  },\n\n  // Protected routes with shared layout\n  {\n    path: '',\n    canActivate: [AuthGuard],\n    loadComponent: () =>\n      import('./shared/components/app-layout.component').then((m) => m.AppLayoutComponent),\n    children: [\n      {\n        path: 'dashboard',\n        loadComponent: () =>\n          import('./features/dashboard/dashboard.component').then((m) => m.DashboardComponent),\n      },\n      {\n        path: 'workout',\n        loadChildren: () =>\n          import('./features/workout-administration').then((m) => m.workoutAdministrationRoutes),\n      },\n    ],\n  },\n\n  // Wildcard route - should be last\n  {\n    path: '**',\n    redirectTo: '/auth/login',\n  },\n];\n", "import {\n  ApplicationConfig,\n  provideBrowserGlobalErrorListeners,\n  provideZonelessChangeDetection,\n  provideAppInitializer,\n  inject,\n} from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\n\nimport { routes } from './app.routes';\nimport { ColorSchemeService } from './core/services/color-scheme.service';\nimport { authInterceptor } from './core/interceptors/auth.interceptor';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZonelessChangeDetection(),\n    provideRouter(routes),\n    provideHttpClient(withInterceptors([authInterceptor])),\n    provideAppInitializer(() => {\n      // Initialize color scheme service - auto-detects browser preference\n      inject(ColorSchemeService);\n    }),\n  ],\n};\n", "import { Component, signal, inject } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { RouterOutlet, Router } from '@angular/router';\nimport { environment } from '../environments/environment';\n\n@Component({\n  selector: 'app-root',\n  imports: [MatButtonModule, MatCardModule, MatIconModule, MatToolbarModule, RouterOutlet],\n  templateUrl: './app.html',\n  styleUrl: './app.scss',\n})\nexport class App {\n  protected readonly title = signal('w-tracker');\n\n  private router = inject(Router);\n\n  constructor() {\n    // Handle GitHub Pages redirect for client-side routing\n    this.handleGitHubPagesRedirect();\n  }\n\n  private handleGitHubPagesRedirect(): void {\n    const redirectPath = sessionStorage.getItem('github-pages-redirect');\n    if (redirectPath) {\n      sessionStorage.removeItem('github-pages-redirect');\n\n      // Use setTimeout to ensure the router is ready\n      setTimeout(() => {\n        const cleanedRedirectPath = redirectPath.replace(environment.href, '');\n        this.router.navigateByUrl(cleanedRedirectPath);\n      }, 0);\n    }\n  }\n}\n", "<router-outlet></router-outlet>\n", "import { bootstrapApplication } from '@angular/platform-browser';\nimport { appConfig } from './app/app.config';\nimport { App } from './app/app';\n\nbootstrapApplication(App, appConfig)\n  .catch((err) => console.error(err));\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQM,IAAO,YAAP,MAAO,WAAS;EACZ,mBAAmB,OAAO,gBAAgB;EAC1C,SAAS,OAAO,MAAM;EAE9B,cAAW;AACT,WAAO,KAAK,iBAAiB,WAAW,KACtC,IAAI,CAAC,cAAa;AAChB,UAAI,UAAU,iBAAiB;AAC7B,eAAO;MACT,OAAO;AACL,eAAO,KAAK,OAAO,cAAc,CAAC,aAAa,CAAC;MAClD;IACF,CAAC,CAAC;EAEN;;qCAdW,YAAS;EAAA;4EAAT,YAAS,SAAT,WAAS,WAAA,YAFR,OAAM,CAAA;;;sEAEP,WAAS,CAAA;UAHrB;WAAW;MACV,YAAY;KACb;;;;;ACHM,IAAM,SAAiB;EAC5B;IACE,MAAM;IACN,YAAY;IACZ,WAAW;;EAGb;IACE,MAAM;IACN,cAAc,MAAM,OAAO,2BAAoB,EAAE,KAAK,CAAC,MAAM,EAAE,UAAU;;;EAI3E;IACE,MAAM;IACN,aAAa,CAAC,SAAS;IACvB,eAAe,MACb,OAAO,oCAA0C,EAAE,KAAK,CAAC,MAAM,EAAE,kBAAkB;IACrF,UAAU;MACR;QACE,MAAM;QACN,eAAe,MACb,OAAO,mCAA0C,EAAE,KAAK,CAAC,MAAM,EAAE,kBAAkB;;MAEvF;QACE,MAAM;QACN,cAAc,MACZ,OAAO,sCAAmC,EAAE,KAAK,CAAC,MAAM,EAAE,2BAA2B;;;;;EAM7F;IACE,MAAM;IACN,YAAY;;;;;ACzBT,IAAM,YAA+B;EAC1C,WAAW;IACT,mCAAkC;IAClC,+BAA8B;IAC9B,cAAc,MAAM;IACpB,kBAAkB,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACrD,sBAAsB,MAAK;AAEzB,aAAO,kBAAkB;IAC3B,CAAC;;;;;ACTC,IAAO,MAAP,MAAO,KAAG;EACK,QAAQ,OAAO,aAAW,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAErC,SAAS,OAAO,MAAM;EAE9B,cAAA;AAEE,SAAK,0BAAyB;EAChC;EAEQ,4BAAyB;AAC/B,UAAM,eAAe,eAAe,QAAQ,uBAAuB;AACnE,QAAI,cAAc;AAChB,qBAAe,WAAW,uBAAuB;AAGjD,iBAAW,MAAK;AACd,cAAM,sBAAsB,aAAa,QAAQ,YAAY,MAAM,EAAE;AACrE,aAAK,OAAO,cAAc,mBAAmB;MAC/C,GAAG,CAAC;IACN;EACF;;qCArBW,MAAG;EAAA;yEAAH,MAAG,WAAA,CAAA,CAAA,UAAA,CAAA,GAAA,OAAA,GAAA,MAAA,GAAA,UAAA,SAAA,aAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACdhB,MAAA,oBAAA,GAAA,eAAA;;oBDUY,iBAAiB,eAAe,eAAe,kBAAkB,YAAY,GAAA,eAAA,EAAA,CAAA;;;sEAI5E,KAAG,CAAA;UANf;uBACW,YAAU,SACX,CAAC,iBAAiB,eAAe,eAAe,kBAAkB,YAAY,GAAC,UAAA,oCAAA,CAAA;;;;6EAI7E,KAAG,EAAA,WAAA,OAAA,UAAA,kBAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;AEVhB,qBAAqB,KAAK,SAAS,EAChC,MAAM,CAAC,QAAQ,QAAQ,MAAM,GAAG,CAAC;",
  "names": []
}
