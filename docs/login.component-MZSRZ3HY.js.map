{
  "version": 3,
  "sources": ["src/app/auth/models/login-user.form.ts", "src/app/auth/components/login.component.ts"],
  "sourcesContent": ["import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { LoginRequest } from './auth.models';\n\ntype LoginUserFormControls = {\n  username: FormControl<string | null>;\n  password: FormControl<string | null>;\n};\n\nexport class LoginUserForm extends FormGroup<LoginUserFormControls> {\n  constructor() {\n    super({\n      username: new FormControl<string | null>('', Validators.required),\n      password: new FormControl<string | null>('', [Validators.required, Validators.minLength(6)]),\n    });\n  }\n\n  getSubmitValue(): LoginRequest {\n    const formValue = this.value;\n    return {\n      username: formValue.username || '',\n      password: formValue.password || '',\n    };\n  }\n}\n", "import { Component, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { AuthStateService } from '../services/auth-state.service';\nimport { AuthApiService } from '../services/auth-api.service';\nimport { LoginUserForm } from '../models/login-user.form';\nimport { LoginResponse } from '../models/auth.models';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n  ],\n  styleUrl: '../auth.scss',\n  template: `\n    <div class=\"w-full max-w-md space-y-8\">\n      <div>\n        <h2 class=\"auth-heading mt-6 text-center text-3xl font-extrabold\">\n          Sign in to your account\n        </h2>\n        <p class=\"auth-text mt-2 text-center text-sm\">\n          Or\n          <a routerLink=\"/auth/register\" class=\"font-medium text-indigo-600 hover:text-indigo-500\">\n            create a new account\n          </a>\n        </p>\n      </div>\n\n      <mat-card class=\"auth-card p-6\">\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"space-y-6\">\n          <div>\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n              <mat-label>Username</mat-label>\n              <input\n                matInput\n                formControlName=\"username\"\n                placeholder=\"Enter your username\"\n                autocomplete=\"username\"\n              />\n              <mat-icon matSuffix>person</mat-icon>\n              <mat-error *ngIf=\"loginForm.get('username')?.hasError('required')\">\n                Username is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div>\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n              <mat-label>Password</mat-label>\n              <input\n                matInput\n                [type]=\"hidePassword ? 'password' : 'text'\"\n                formControlName=\"password\"\n                placeholder=\"Enter your password\"\n                autocomplete=\"current-password\"\n              />\n              <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hidePassword = !hidePassword\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hidePassword\"\n                type=\"button\"\n              >\n                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n              </button>\n              <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">\n                Password is required\n              </mat-error>\n              <mat-error *ngIf=\"loginForm.get('password')?.hasError('minlength')\">\n                Password must be at least 6 characters long\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"flex items-center justify-between\">\n            <div class=\"text-sm\">\n              <a\n                routerLink=\"/auth/forgot-password\"\n                class=\"font-medium text-indigo-600 hover:text-indigo-500\"\n              >\n                Forgot your password?\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <button\n              mat-raised-button\n              color=\"primary\"\n              type=\"submit\"\n              class=\"w-full\"\n              [disabled]=\"loginForm.invalid || isLoading\"\n            >\n              <mat-spinner *ngIf=\"isLoading\" diameter=\"20\" class=\"mr-2\"></mat-spinner>\n              <span *ngIf=\"!isLoading\">Sign In</span>\n            </button>\n          </div>\n        </form>\n      </mat-card>\n    </div>\n  `,\n})\nexport class LoginComponent implements OnDestroy {\n  private authStateService = inject(AuthStateService);\n  private authApiService = inject(AuthApiService);\n  private router = inject(Router);\n  private destroy$ = new Subject<void>();\n\n  hidePassword = true;\n  isLoading = false;\n\n  loginForm = new LoginUserForm();\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid && !this.isLoading) {\n      this.isLoading = true;\n      const credentials = this.loginForm.getSubmitValue();\n\n      this.authApiService\n        .login(credentials)\n        .pipe(\n          tap((response: LoginResponse) => {\n            this.authStateService.setAuthState(response);\n          }),\n          takeUntil(this.destroy$),\n        )\n        .subscribe({\n          next: () => {\n            this.isLoading = false;\n            this.router.navigate(['/dashboard']);\n          },\n          error: () => {\n            this.isLoading = false;\n          },\n        });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
