{
  "version": 3,
  "sources": ["src/app/auth/services/auth-api.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport {\n  LoginRequest,\n  LoginResponse,\n  RegisterRequest,\n  RegisterResponse,\n} from '../models/auth.models';\nimport { handleNotifications } from '../../core';\nimport { NotificationService } from '../../core/services/notification.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthApiService {\n  private readonly API_URL = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService,\n  ) {}\n\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(`${this.API_URL}/login`, credentials).pipe(\n      handleNotifications({\n        successMessage: 'Login successful!',\n        errorMessage: 'Login failed. Please try again.',\n        notificationService: this.notificationService,\n      }),\n    );\n  }\n\n  register(userData: RegisterRequest): Observable<RegisterResponse> {\n    return this.http.post<RegisterResponse>(`${this.API_URL}/users`, userData).pipe(\n      handleNotifications({\n        successMessage: 'Account created successfully!',\n        errorMessage: 'Registration failed. Please try again.',\n        notificationService: this.notificationService,\n      }),\n    );\n  }\n\n  requestPasswordReset(email: string): Observable<any> {\n    return this.http.post(`${this.API_URL}/auth/forgot-password`, { email }).pipe(\n      handleNotifications({\n        successMessage: 'Password reset email sent successfully!',\n        errorMessage: 'Failed to send reset email. Please try again.',\n        notificationService: this.notificationService,\n      }),\n    );\n  }\n\n  validateToken(token: string): Observable<any> {\n    return this.http.post(`${this.API_URL}/auth/validate`, { token });\n  }\n\n  refreshToken(refreshToken: string): Observable<any> {\n    return this.http.post(`${this.API_URL}/auth/refresh`, { refreshToken });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAgBM,IAAO,iBAAP,MAAO,gBAAc;EAIf;EACA;EAJO,UAAU,YAAY;EAEvC,YACU,MACA,qBAAwC;AADxC,SAAA,OAAA;AACA,SAAA,sBAAA;EACP;EAEH,MAAM,aAAyB;AAC7B,WAAO,KAAK,KAAK,KAAoB,GAAG,KAAK,OAAO,UAAU,WAAW,EAAE,KACzE,oBAAoB;MAClB,gBAAgB;MAChB,cAAc;MACd,qBAAqB,KAAK;KAC3B,CAAC;EAEN;EAEA,SAAS,UAAyB;AAChC,WAAO,KAAK,KAAK,KAAuB,GAAG,KAAK,OAAO,UAAU,QAAQ,EAAE,KACzE,oBAAoB;MAClB,gBAAgB;MAChB,cAAc;MACd,qBAAqB,KAAK;KAC3B,CAAC;EAEN;EAEA,qBAAqB,OAAa;AAChC,WAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,yBAAyB,EAAE,MAAK,CAAE,EAAE,KACvE,oBAAoB;MAClB,gBAAgB;MAChB,cAAc;MACd,qBAAqB,KAAK;KAC3B,CAAC;EAEN;EAEA,cAAc,OAAa;AACzB,WAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,kBAAkB,EAAE,MAAK,CAAE;EAClE;EAEA,aAAa,cAAoB;AAC/B,WAAO,KAAK,KAAK,KAAK,GAAG,KAAK,OAAO,iBAAiB,EAAE,aAAY,CAAE;EACxE;;qCA5CW,iBAAc,mBAAA,UAAA,GAAA,mBAAA,mBAAA,CAAA;EAAA;4EAAd,iBAAc,SAAd,gBAAc,WAAA,YAFb,OAAM,CAAA;;;sEAEP,gBAAc,CAAA;UAH1B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
